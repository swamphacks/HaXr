generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  Hacker
  Admin
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified DateTime?
  phone         String?   @db.VarChar(10) // US phone number
  school        String?
  image         String?
  role          Role      @default(Hacker)
  accounts      Account[]
  sessions      Session[]

  // Optional
  bio         String?  @db.Text
  githubURL   String?
  linkedinURL String?
  skills      String[]

  resumeUrl String?

  applications Application[]

  attendees Attendee[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model AdminLink {
  id      String   @id @default(cuid())
  name    String
  url     String
  addedOn DateTime @default(now())
}

model Competition {
  code          String   @id
  name          String
  description   String?
  frontpage_url String
  start_date    DateTime
  end_date      DateTime
  location      String
  location_url  String

  preview          DateTime
  apply_open       DateTime
  apply_close      DateTime
  decision_release DateTime
  confirm_by       DateTime
  waitlist_open    DateTime?
  waitlist_close   DateTime?
  max_attendees    Int?

  interestedPeople InterestedPerson[]
  attendees        Attendee[]
  applications     Application[]
  redeemables      Redeemable[]
}

model InterestedPerson {
  id              String @id @default(cuid())
  competitionCode String

  name       String
  email      String
  signedUpAt DateTime @default(now())

  competition Competition @relation(fields: [competitionCode], references: [code], onDelete: Cascade, onUpdate: Cascade)

  @@unique([competitionCode, email], name: "compCode_email")
}

enum Status {
  STARTED
  APPLIED

  REJECTED
  WAITLISTED
  ACCEPTED

  NOT_ATTENDING
  ATTENDING
}

model Application {
  id              String @id @default(cuid())
  competitionCode String
  userId          String

  content Json

  status      Status      @default(STARTED)
  competition Competition @relation(fields: [competitionCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([competitionCode, userId])
}

model Attendee {
  competitionCode String
  userId          String
  applicationId   String   @unique
  badgeId         String?  @unique
  checkedInAt     DateTime @default(now())

  competition  Competition   @relation(fields: [competitionCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // attendeeRedeemables AttendeeRedeemables[]
  transactions Transaction[]

  @@unique([competitionCode, userId], name: "compCode_userId")
}

model Redeemable {
  competitionCode String
  competition     Competition @relation(fields: [competitionCode], references: [code], onDelete: Cascade, onUpdate: Cascade)

  name         String
  description  String?
  createdAt    DateTime      @default(now())
  transactions Transaction[]

  @@id([competitionCode, name])
}

model Transaction {
  id              String @id @default(cuid())
  competitionCode String

  attendee Attendee @relation(fields: [competitionCode, userId], references: [competitionCode, userId], onDelete: Cascade, onUpdate: Cascade)
  userId   String

  redeemable     Redeemable @relation(fields: [competitionCode, redeemableName], references: [competitionCode, name], onDelete: Cascade, onUpdate: Cascade)
  redeemableName String

  quantity     Int
  transactedAt DateTime @default(now())
}
