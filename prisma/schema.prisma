generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgres"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  Hacker
  Admin
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  emailVerified DateTime?
  phone         String?   @db.VarChar(10) // US phone number
  school        String?
  image         String?
  role          Role      @default(Hacker)

  accounts Account[]
  sessions Session[]
  isAdmin       Boolean    @default(false)
  Response      Response[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model AdminLink {
  id      String   @id @default(cuid())
  name    String
  url     String
  addedOn DateTime @default(now())
}

model Competition {
  code          String   @id
  name          String
  description   String?
  frontpage_url String
  start_date    DateTime
  end_date      DateTime
  location      String
  location_url  String

  preview          DateTime
  apply_open       DateTime
  apply_close      DateTime
  decision_release DateTime
  confirm_by       DateTime
  application      Form?    @relation(name: "CompetitionApplication", fields: [application_id], references: [id])
  application_id   String?  @unique

  forms Form[] @relation(name: "CompetitionForms")
}

model Form {
  id               String       @id @default(cuid())
  title            String       @default("Untitled Form")
  description      String?
  created_at       DateTime     @default(now())
  update_at        DateTime     @updatedAt
  competition      Competition  @relation(name: "CompetitionForms", fields: [competition_code], references: [code])
  competitionApp   Competition? @relation(name: "CompetitionApplication")
  competition_code String

  // Settings
  is_mlh               Boolean   @default(false)
  opens_at             DateTime?
  closes_at            DateTime?
  required_for_checkin Boolean   @default(false)
  is_published         Boolean   @default(false)

  sections  Json       @default("[]")
  responses Response[]
}

model Response {
  id              String   @id @default(cuid())
  saved_at        DateTime @updatedAt
  submitted_by    User     @relation(fields: [submitted_by_id], references: [id])
  submitted_by_id String
  submitted       Boolean  @default(false)

  values Json

  form    Form   @relation(fields: [form_id], references: [id])
  form_id String
}
